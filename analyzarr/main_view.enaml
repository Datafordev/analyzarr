#------------------------------------------------------------------------------
#  Copyright (c) 2012, Enthought, Inc.
#  All rights reserved.
#------------------------------------------------------------------------------
""" An example of the `MainWindow` widget.

This example demonstrates the use of the `MainWindow` widget. This is a
subclass of the `Window` widget which adds support for dock panes, tool
bars and a menu bar. The children of a `MainWindow` can be defined in
any order. Like `Window`, a `MainWindow` has at most one central widget
which is an instance of `Container`. A `MainWindow` can have any number
of `DockPane` and `ToolBar` children, and at most one `MenuBar`.

Support for a `StatusBar` will be added in the future.

Implementation Notes:
    
    The main window facilities in Wx are very weak. If these features
    are required for a particular application, strongly prefer the Qt 
    backend over Wx (this is generally a good life-rule).

"""
from enaml.layout.api import vbox
from enaml.widgets.api import (
    MainWindow, ToolBar, DockPane, MenuBar, Menu, Action, ActionGroup,
    Container, Html, PushButton, EnableCanvas, CheckBox
)

from chaco.api import ArrayPlotData, Plot, ImageData
from chaco import default_colormaps as dc
from scipy.misc import lena
from traits.api import HasTraits, Instance, Array, Bool

from controllers import HighSeasAdventure

class ImageModel(HasTraits):
    """ Create a Chaco Plot object with the data to analyze.

    """
    #: The plot which will draw the image data.
    plot = Instance(Plot)

    #: The array data for the plot.
    data = Array

    def __init__(self, **kwargs):
        """ Initialize an ImageModel.

        Parameters
        ----------
        filename : str, optional
            If provided, then ImageData is loaded with the .fromfile class
            method, otherwise, a sample image is loaded.

        """
        super(ImageModel, self).__init__()
        if 'filename' in kwargs:
            image_source = ImageData.fromfile(kwargs[filename])
            self.data = image_source._data
        else:
            self.data = lena()
            image_source = ImageData(data=self.data, value_depth=1)
        plot_data = ArrayPlotData()
        plot_data.set_data('imagedata', image_source._data)
        self.plot = Plot(plot_data, default_origin='top left', padding=30)
        self.plot.img_plot('imagedata', colormap=dc.gray)
        self.plot.aspect_ratio=float(image_source._data.shape[1]) / float(image_source._data.shape[0])

enamldef MyMenuBar(MenuBar):
    Menu:
        title = '&File'
        Action:
            text = 'New File\tCtrl+N'
            triggered :: print 'New File triggered'
        Action:
            text = 'Open File\tCtrl+O'
            triggered :: print 'Open File triggered'
        Action:
            text = 'Open Folder...'
            triggered :: print 'Open Folder triggered'
    Menu:
        title = '&Edit'
        Action:
            text = 'Undo\tCtrl+Z'
            triggered :: print 'Undo triggered'
        Action:
            text = 'Redo\tCtrl+R'
            triggered :: print 'Redo triggered'
        Menu:
            title = 'Undo Selection'
            Action:
                text = 'Undo Insert\tCtrl+U'
                triggered :: print 'Undo Insert triggered'
            Action:
                text = 'Redo Insert\tCtrl+Shift+U'
                enabled = False
                triggered :: print 'Redo Insert triggered'
        Action:
            separator = True
        Action:
            text = 'Cut\tCtrl+X'
            triggered :: print "Cut triggered"
        Action:
            text = 'Copy\tCtrl+C'
            triggered :: print 'Copy triggered'
        Action:
            text = 'Paste\tCtrl+V'
            triggered :: print 'Paste triggered'
    Menu:
        title = '&View'
        ActionGroup:
            Action:
                checkable = True
                text = 'Center'
                toggled :: print '%s toggled %s' % (text, 'on' if checked else 'off')
            Action:
                checkable = True
                text = 'Left'
                toggled :: print '%s toggled %s' % (text, 'on' if checked else 'off')
            Action:
                checkable = True
                text = 'Right'
                toggled :: print '%s toggled %s' % (text, 'on' if checked else 'off')
            Action:
                checkable = True
                text = 'Justify'
                toggled :: print '%s toggled %s' % (text, 'on' if checked else 'off')


enamldef ImagePlotToolBar(ToolBar):
    attr controller
    Action:
        text = "Save"
        tool_tip = "Save current plot"
    Action:
        text = "<"
        tool_tip = "View previous image in stack"
        triggered :: controller.decrease_selected_index()
    Action:
        text = ">"
        tool_tip = "View next image in stack"
        triggered :: controller.increase_selected_index()
        
                
enamldef MyToolBar(ToolBar):
    Action:
        text = 'Button'
        tool_tip = text
    ActionGroup:
        Action:
            separator = True
        Action:
            checkable = True
            text = 'Exclusive'
            triggered :: print 'triggered'
            toggled :: print 'toggled' 
        Action:
            checkable = True
            text = 'ToolBar'
        Action:
            checkable = True
            text = 'Buttons'
        Action:
            separator = True
    Action:
        checkable = True
        text = 'Checkable'
    Action:
        checkable = True
        text = 'ToolBar'
    Action:
        checkable = True
        text = 'Buttons'


enamldef ViewToolBar(ToolBar):
    attr controller
    Action:
        text = "Images"
        checkable = True
        checked := controller.show_image_view
        toggled :: print "toggled image view"
    Action:
        text = "Cells"
        checkable = True
        checked := controller.show_cell_view
        toggled :: print "toggled cell view"
    Action: show_scores:
        text = "Scores"
        checkable = True
        checked := controller.show_score_view
        toggled :: print "toggled score view"
    Action: show_factors:
        text = "Factors"
        checkable = True
        checked := controller.show_factor_view
        toggled :: print "toggled factor view"
    
        
enamldef MyDockPane(DockPane):
    title << 'Dock Area %s | %s' % (dock_area, 'floating' if floating else 'docked')
    Container:
        PushButton:
            text = 'Foo'
        PushButton:
            text = 'Bar'
        PushButton:
            text = 'Baz'

enamldef ImageViewDockPane(DockPane): imgdockpane:
    attr controller
    Container:
        constraints = [
            vbox(canvas, toolbar)
        ]
        EnableCanvas: canvas:
            component = controller.plot
        ImagePlotToolBar: toolbar:
            movable = False
            controller = imgdockpane.controller

enamldef Main(MainWindow): main:
    attr controller = HighSeasAdventure()
    initial_size = (600, 600)
    MyMenuBar:
        pass
    MyToolBar:
        pass
    ViewToolBar: view_buttons:
        controller = main.controller
        dock_area = 'left'
    ImageViewDockPane: image_view:
        controller = main.controller.image_controller
        title << "Image view"
        dock_area = 'left'
        visible := main.controller.show_image_view
    ImageViewDockPane: cell_view:
        controller = main.controller.cell_controller
        title << "Cell view"
        dock_area = 'right'
        #: floating = True
        visible := main.controller.show_cell_view

"""
    ImageViewDockPane: score_view:
        title << "Score view"
        dock_area = 'left'
        #: allowed_dock_areas = ['left', 'right']
        visible := main.controller.show_score_view
    ImageViewDockPane: factor_view:
        title << "Factor view"
        dock_area = 'right'
        visible := main.controller.show_factor_view
"""

"""
    Container:
        constraints = [vbox(html, tbar, spacing=0)]
        Html:
            id: html
            source = '<h1><center>Hello World!</center></h1>'
        MyToolBar:
            id: tbar
"""