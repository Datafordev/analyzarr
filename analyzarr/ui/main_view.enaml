#------------------------------------------------------------------------------
#  Copyright (c) 2012, Enthought, Inc.
#  All rights reserved.
#------------------------------------------------------------------------------
""" An example of the `MainWindow` widget.

This example demonstrates the use of the `MainWindow` widget. This is a
subclass of the `Window` widget which adds support for dock panes, tool
bars and a menu bar. The children of a `MainWindow` can be defined in
any order. Like `Window`, a `MainWindow` has at most one central widget
which is an instance of `Container`. A `MainWindow` can have any number
of `DockPane` and `ToolBar` children, and at most one `MenuBar`.

Support for a `StatusBar` will be added in the future.

Implementation Notes:
    
    The main window facilities in Wx are very weak. If these features
    are required for a particular application, strongly prefer the Qt 
    backend over Wx (this is generally a good life-rule).

"""
from enaml.layout.api import vbox, hbox, vertical, horizontal
from enaml.widgets.api import (
    MainWindow, ToolBar, DockPane, MenuBar, Menu, Action, ActionGroup,
    Container, Html, PushButton, EnableCanvas, CheckBox, FileDialog,
    Label, ComboBox, Field, GroupBox, ProgressBar, FlowArea
)

from enaml.stdlib.fields import FloatField, IntField

import enaml
with enaml.imports():
    from ucc import CellCropperInterface

def open_callback(dlg):
    if dlg.result=='accepted': 
        dlg.controller.open_treasure_chest(dlg.path)

def import_callback(dlg):
    if dlg.result=='accepted': 
        dlg.controller.import_files(dlg.paths)

def new_callback(dlg):
    if dlg.result=='accepted':
        dlg.controller.new_treasure_chest(dlg.path)

enamldef NewChestDialog(FileDialog):
    attr controller
    title = "WHARR TO BURY YE TREASURE?"
    mode = "save_file"
    callback=new_callback
    destroy_on_close=False

enamldef OpenChestDialog(FileDialog):
    attr controller
    title = "WHARR BE YE TREASURE?"
    mode = "open_file"
    callback=open_callback
    destroy_on_close=False

enamldef ImportFilesDialog(FileDialog):
    attr controller
    title = "Choose the files to plunder:"
    mode = "open_files"
    callback=import_callback
    destroy_on_close=False

enamldef MyMenuBar(MenuBar): menu:
    attr controller
    NewChestDialog: new_dialog:
        controller = menu.controller
    OpenChestDialog: chest_dialog:
        controller = menu.controller
    ImportFilesDialog: import_dialog:
        controller = menu.controller
    Menu:
        title = '&File'
        Action:
            text = 'New Chest\tCtrl+N'
            triggered :: new_dialog.open()
        Action:
            text = 'Open Chest\tCtrl+O'
            triggered :: chest_dialog.open()
        Action:
            text = 'Import Files'
            triggered :: import_dialog.open()
        Action:
            text = 'Test data'
            triggered :: menu.controller.load_test_data()
"""            
    Menu:
        title = '&Edit'
        Action:
            text = 'Undo\tCtrl+Z'
            triggered :: print 'Undo triggered'
        Action:
            text = 'Redo\tCtrl+R'
            triggered :: print 'Redo triggered'
        Menu:
            title = 'Undo Selection'
            Action:
                text = 'Undo Insert\tCtrl+U'
                triggered :: print 'Undo Insert triggered'
            Action:
                text = 'Redo Insert\tCtrl+Shift+U'
                enabled = False
                triggered :: print 'Redo Insert triggered'
        Action:
            separator = True
        Action:
            text = 'Cut\tCtrl+X'
            triggered :: print "Cut triggered"
        Action:
            text = 'Copy\tCtrl+C'
            triggered :: print 'Copy triggered'
        Action:
            text = 'Paste\tCtrl+V'
            triggered :: print 'Paste triggered'
    Menu:
        title = '&View'
        ActionGroup:
            Action:
                checkable = True
                text = 'Center'
                toggled :: print '%s toggled %s' % (text, 'on' if checked else 'off')
            Action:
                checkable = True
                text = 'Left'
                toggled :: print '%s toggled %s' % (text, 'on' if checked else 'off')
            Action:
                checkable = True
                text = 'Right'
                toggled :: print '%s toggled %s' % (text, 'on' if checked else 'off')
            Action:
                checkable = True
                text = 'Justify'
                toggled :: print '%s toggled %s' % (text, 'on' if checked else 'off')
"""

enamldef ImagePlotButtons(Container): image_buttons:
    attr controller
    constraints = [
            hbox(image_box, peak_selection, characteristic_box, vector_box),
        #:characteristic_box.width == 2*peak_selection.width,
        #:vector_box.width == characteristic_box.width,
    ]
    hug_height='required'
    GroupBox: image_box:
        constraints = [hbox(save, prev_image, position, next_image),
        prev_image.width == save.width,
        next_image.width == save.width,]
        title="Image:"
        hug_height='required'
        hug_width='medium'
        PushButton: save:
            text = "Save"
            tool_tip = "Save current plot"
            enabled << controller._can_save
            clicked :: controller.open_save_UI()
            hug_width='strong'
        PushButton: prev_image:
            text = "<"
            tool_tip = "View previous image in stack"
            clicked :: controller.decrease_selected_index()
            enabled << controller._can_change_idx
        Label: position:
            text << "%i/%i" %(controller.selected_index+1, controller.numfiles)
            hug_width='strong'
        PushButton: next_image:
            text = ">"
            tool_tip = "View next image in stack"
            clicked :: controller.increase_selected_index()
            enabled << controller._can_change_idx
    GroupBox: peak_selection:
        constraints = [hbox(peak_id),]
        hug_height='required'
        hug_width='medium'
        title = "Peak ID:"
        ComboBox: peak_id:
            items << controller._peak_ids
            index := controller._selected_peak
            enabled <<  controller._can_map_peaks
            hug_width = 'medium'
    GroupBox: characteristic_box:
        constraints = [hbox(characteristic, expression),]
        hug_height='required'
        title = "Color Map:"
        hug_width = 'medium'
        #:visible << controller._can_map_peaks
        ComboBox: characteristic:
            items << controller._characteristics
            index := controller._characteristic 
            enabled << controller._can_map_peaks
            hug_width = 'medium'
        Field: expression:
            text := controller._peak_expression
            enabled << controller._characteristics[characteristic.index] == "Expression"
    GroupBox: vector_box:
        constraints = [hbox(vector, vector_label, vector_scale),
                    vector_scale.width == 0.5*vector.width,]
        hug_height='required'
        title = "Vector Map:"
        hug_width='medium'
        ComboBox: vector:
            items << controller._vectors
            index := controller._vector
            enabled << controller._can_map_peaks
            hug_width = 'strong'
        Label: vector_label:
            text = "Vector scale"
        FloatField: vector_scale:
            value := controller.vector_scale
            enabled <<  controller._can_map_peaks
        

enamldef CellPlotButtons(Container): cell_buttons:
    attr controller
    constraints = [
        hbox(image_box, id_box),
        #:hbox(image_box, id_box, char_progress_box),
        ]
    hug_height='required'
    GroupBox: image_box:
        constraints = [hbox(save, prev_image, position, next_image, omit_cell),
        prev_image.width == save.width,
        next_image.width == save.width,
        omit_cell.width == save.width]
        title="Image:"
        hug_height='required'
        hug_width='medium'
        PushButton: save:
            text = "Save"
            tool_tip = "Save current plot"
            enabled << controller._can_save
            clicked :: controller.open_save_UI()
            hug_width='strong'
        PushButton: prev_image:
            text = "<"
            tool_tip = "View previous image in stack"
            clicked :: controller.decrease_selected_index()
            enabled << controller._can_change_idx
        Label: position:
            text << "%i/%i" %(controller.selected_index+1, controller.numfiles)
            hug_width='strong'
        PushButton: next_image:
            text = ">"
            tool_tip = "View next image in stack"
            clicked :: controller.increase_selected_index()
            enabled << controller._can_change_idx
        PushButton: omit_cell:
            text = "Omit cell"
            tool_tip = "Omit this cell from from any analyses, as well as any peaks associated with it."
            clicked :: controller.omit_selected_index()
            enabled << controller._can_change_idx
            checkable = True
            checked << controller.omitted
    GroupBox: id_box:
        title = "Peak IDs:"
        CheckBox:
            text = "Show"
            enabled << controller._can_show_peak_ids
            checked := controller._show_peak_ids
    #:GroupBox: char_progress_box:
    #:    title = "Characterization Progress"
    #:    ProgressBar:
    #:        minimum = 0
    #:        maximum << controller._progress_max
    #:        value << controller._progress_value
            
enamldef FactorPlotButtons(Container): factor_buttons:
    attr controller
    constraints = [
             hbox(component_box, characteristic_box, vector_box)
        #:characteristic_box.width == vector_box.width,
    ]
    hug_height='required'
    hug_width='medium'
    GroupBox: component_box:
        constraints = [hbox(save, prev_image, position, next_image),
        prev_image.width == save.width,
        next_image.width == save.width,]
        title="Component:"
        hug_height='required'
        hug_width='medium'
        PushButton: save:
            text = "Save"
            tool_tip = "Save current plot"
            enabled << controller._can_save
            clicked :: controller.open_factor_save_UI()
            hug_width='strong'
        PushButton: prev_image:
            text = "<"
            tool_tip = "View previous factor"
            clicked :: controller.decrease_selected_component()
            enabled << controller._can_change_idx
        Label: position:
            text << "%i/%i" %(controller.component_index+1, controller.dimensionality)
            hug_width='strong'
            #:text = 'barf'
        PushButton: next_image:
            text = ">"
            tool_tip = "View next factor"
            clicked :: controller.increase_selected_component()
            enabled << controller._can_change_idx
    GroupBox: characteristic_box:
        constraints = [hbox(characteristic),]
        hug_height='required'
        title = "Color Map:"
        hug_width='medium'
        #:visible << controller._can_map_peaks
        ComboBox: characteristic:
            items << controller._characteristics
            index := controller._characteristic 
            enabled << controller._can_map_peaks
            hug_width='medium'
    GroupBox: vector_box:
        constraints = [hbox(vector, vector_label, vector_scale),
                    vector_scale.width == 0.5*vector.width,]
        hug_width='medium'
        title = "Vector Map:"
        ComboBox: vector:
            items << controller._vectors
            index := controller._vector
            enabled << controller._can_map_peaks
            hug_width='strong'
        Label: vector_label:
            text = "Vector scale"
            hug_width='strong'
        FloatField: vector_scale:
            value := controller.vector_scale
            enabled <<  controller._can_map_peaks

enamldef ScorePlotButtons(Container): score_buttons:
    attr controller
    constraints = [
        hbox(image_box, context_box),
        ]
    hug_height='required'
    GroupBox: image_box:
        constraints = [hbox(save, prev_image, position, next_image),
        prev_image.width == save.width,
        next_image.width == save.width,]
        title="Image:"
        hug_height='required'
        hug_width='medium'
        PushButton: save:
            text = "Save"
            tool_tip = "Save current plot"
            enabled << controller._can_save
            clicked :: controller.open_score_save_UI()
            hug_width='strong'
        PushButton: prev_image:
            text = "<"
            tool_tip = "View previous image in stack"
            clicked :: controller.decrease_selected_index()
            enabled << controller._can_change_idx
        Label: position:
            text << "%i/%i" %(controller.selected_index+1, controller.numfiles)
            hug_width='strong'
        PushButton: next_image:
            text = ">"
            tool_tip = "View next image in stack"
            clicked :: controller.increase_selected_index()
            enabled << controller._can_change_idx
       
    GroupBox: context_box:
        constraints = [hbox(contexts)]
        title = "Context:"
        #:hug_width='weak'
        ComboBox: contexts:
            items << controller._contexts
            index := controller._context
            enabled << len(controller._contexts)>0
            tool_tip = "Which MDA run to display"
            hug_width='medium'
            resist_width='strong'

enamldef ViewToolBar(ToolBar):
    attr controller
    Action:
        text = "Images"
        checkable = True
        checked := controller.show_image_view
    Action:
        text = "Cells"
        checkable = True
        checked := controller.show_cell_view
    Action:
        text = "Factors"
        checkable = True
        checked := controller.show_factor_view
    Action:
        text = "Scores"
        checkable = True
        checked := controller.show_score_view      
        
        
enamldef ToolsToolBar(ToolBar):
    #: this controller is the HighSeasAdventure controller
    attr controller
    Action: crop:
        text = "Crop cells"
        tool_tip = "Open the cell cropping interface"
        triggered :: controller.open_crop_UI()
        enabled << (controller.image_controller.numfiles>0)
    Action: characterize:
        text = "Characterize Peaks"
        tool_tip = "Locate and characterize peaks in the cell stack"
        triggered :: controller.cell_controller.toggle_char()
        enabled << (controller.cell_controller.numfiles>0)
    Action: mda:
        text = "MDA"
        tool_tip = "Perform some sort of multivariate data analysis"
        triggered :: controller.open_MDA_UI()
        enabled << (controller.cell_controller.numfiles>0)
    
enamldef CellViewDockPane(DockPane): celldockpane:
    attr controller
    Container:
        hug_width = 'medium'
        EnableCanvas: canvas:
            component << celldockpane.controller.plot
        CellPlotButtons: buttons:
            #:movable = False
            controller << celldockpane.controller

enamldef FactorViewDockPane(DockPane): factordockpane:
    attr controller
    Container:
        hug_width = 'medium'
        EnableCanvas: canvas:
            component << factordockpane.controller.factor_plot
        FactorPlotButtons: buttons:
            controller << factordockpane.controller

enamldef ScoreViewDockPane(DockPane): scoredockpane:
    attr controller
    Container:
        hug_width = 'medium'
        EnableCanvas: canvas:
            component << scoredockpane.controller.score_plot
        ScorePlotButtons: buttons:
            controller << scoredockpane.controller

enamldef ImageViewDockPane(DockPane): imagedockpane:
    attr controller
    Container:
        hug_width = 'medium'
        EnableCanvas: canvas:
            component << imagedockpane.controller.plot
            
        ImagePlotButtons: buttons:
            controller << imagedockpane.controller

enamldef Main(MainWindow): main:
    attr controller
    initial_size = (500, 500)
    title = "Analyzarr"
    MyMenuBar:
        controller << main.controller
    ViewToolBar: view_buttons:
        controller << main.controller
        dock_area = 'left'
    ToolsToolBar:
        controller << main.controller
        dock_area = 'left'
    ImageViewDockPane: image_view:
        controller << main.controller.image_controller
        title << "Image view"
        dock_area = 'left'
        visible := main.controller.show_image_view
    CellViewDockPane: cell_view:
        controller << main.controller.cell_controller
        title << "Cell view"
        dock_area = 'right'
        #: floating = True
        visible := main.controller.show_cell_view
    FactorViewDockPane: factor_view:
        controller << main.controller.mda_controller
        title << "Factor view"
        dock_area = 'right'
        visible := main.controller.show_factor_view
    ScoreViewDockPane: score_view:
        controller << main.controller.mda_controller
        title << "Score view"
        dock_area = 'left'
        visible := main.controller.show_score_view
